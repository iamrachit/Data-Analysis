# -*- coding: utf-8 -*-
"""Predict_Car_Price.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10tKc6-Q0db7P5xCazgG7-IJciQB10QNO
"""

# Get the essential libraries
from sklearn import linear_model
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Import file
or_data = pd.read_csv("/content/car data.csv")
or_data.head()

# Get the details of the dataset 
or_data.info()

# Looking at the categorical variable values
 # or_data.columns 
 # print(or_data['Car Name'].value_count())

print(or_data['Fuel_Type'].value_counts())
print(or_data['Seller_Type'].value_counts())
print(or_data['Transmission'].value_counts())

# look at the statistics of dataset 
or_data.describe()

or_data.isna().sum()

# find the correlation of different features of the dataset with its label 
or_data.corr()['Selling_Price']

# look at the correlation of all the variable 
cor = or_data.corr()
sns.heatmap(cor)

# role 1 what is the corelation of one variable to other variable 
# role 2 check multicolinearity availabel

or_data

# Data preprocessing and preparation 

or_data['Age'] = 2020 - or_data['Year']
or_data.drop('Year',axis = 1,inplace = True)
or_data.head()

or_data.drop('Car_Name',axis =  1, inplace = True)
or_data.head()

or_data = pd.get_dummies(data = or_data,drop_first = True)
 or_data.head()

X = or_data.drop('Selling_Price',axis = 1)
X.head()

Y = or_data[['Selling_Price']]
Y.head()

# Divide the dataset into train and test datasets 

from sklearn.model_selection import train_test_split 

X_train, X_test , Y_train , Y_test = train_test_split(X,Y,test_size = 0.2,random_state = 1)
print("X train : ",X_train.shape)
print("X test : ",X_test.shape)
print("Y train : ",Y_train.shape)
print("Y test : ",Y_test.shape)

# Fit the linear regressor on the training data 

lm = linear_model.LinearRegression()
lm.fit(X_train,Y_train)

# Get the evaluation metrics for  the prediction 

from sklearn.metrics import mean_absolute_error, mean_squared_error , r2_score
y_pred = lm.predict(X_test)

#Mean Absolute Error

print("Mean Absolute Error : ",mean_absolute_error(Y_test,y_pred))

#Mean Squared Error

print("Mean Squared Error : ",mean_squared_error(Y_test,y_pred))

# R2 score 

print("R2 Score : " , r2_score(Y_test,y_pred))

#Score
print("Score : ",lm.score(X_test,Y_test))

# look at the residal plots 
sns.residplot(x= Y_test, y = y_pred,color = "g")

residuals =  Y_test - y_pred
plt.scatter(y_pred,residuals)
plt.show()

