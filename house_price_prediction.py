# -*- coding: utf-8 -*-
"""House_Price_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZijoQ-YR5D7-GF_Sao-TqWw7aTjpJdJP
"""

# Commented out IPython magic to ensure Python compatibility.
# get all essential libraries 
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.metrics import mean_squared_error

houses = pd.read_csv("/content/kc_house_data.csv")
# get the data

houses

houses.info()

houses.describe()

# check the NAN value 
houses.isna().sum()

# plotting heat map for all the fector or column 
corr = houses.corr()
sns.heatmap(corr)

# create x and y 
feature_cols = ['sqft_living','grade','sqft_above','sqft_living15']
x = houses[feature_cols] # predictor
y = houses.price # response

x.head()

y.head()

# Dividing data in training and testing datasets
from sklearn.model_selection import train_test_split
# print(train_test_split.__doc__)
x_trian , x_test , y_train ,y_test = train_test_split(x,y,train_size = 0.8 , random_state = 100)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

# instantiate fit 
linreg = LinearRegression()
linreg.fit(x_train,y_train)

# Predict 
# Linreg.predict(np.array([[1000,5,1000,1000,2,1]]))

# Mean Square error
mse = mean_squared_error(y_tedt,linreg.predict(x_test))
print(mse)
print(np.sqrt(mse))

# Score 
print(linreg.score(x_test,y_test))

# Cross validation score 
scores = cross_val_score(linreg,x,y,cv = 10)
scores

# look at the residual plot 
y_pred = linreg.predict(x_test)

