# -*- coding: utf-8 -*-
"""Iris_Data_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13fXUw_7pLyUPOgm3PGPAXNpd1KBNKoBx
"""

# Get the essential libraries
from sklearn import linear_model
import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data form scikit 
from sklearn.datasets import load_iris
data = load_iris()

# Look at the information of the data
print(data.DESCR)

# Dividing the data into independant and depandant sets 
X = data.data
Y = data.target

# Dividing data in training and testing datasets
from sklearn.model_selection import train_test_split
# print(train_test_split.__doc__)
Xtrn , Xtst , Ytrn ,Ytst = train_test_split(X,Y,train_size = 0.8 , random_state = 100)

print(Xtrn.shape)
print(Ytrn.shape)
print(Xtst.shape)
print(Ytst.shape)

"""Training Logistic Regression"""

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()

model.fit(Xtrn,Ytrn)

"""Evaluation of Model

"""

Ypred = model.predict(Xtst)

print(Ytst)
print(Ypred)

"""Accuracy

"""

from sklearn.metrics import accuracy_score
acc = accuracy_score(Ytst,Ypred)
acc

"""Confusion Matrix

"""

from sklearn.metrics import confusion_matrix 
cm = confusion_matrix(Ytst,Ypred,labels=[0,1,2])
cm

"""Recall Matrix """

# predicted / # actual class
rm = ((cm.T)/(cm.sum(axis=1))).T # Recall
rm

from sklearn.metrics import recall_score
rec = recall_score(Ytst,Ypred,average ='micro')
rec

"""Precision Matrix

"""

# ACTUAL CLASS / prediction

pm = (cm/cm.sum(axis=0)) # precision
pm

from sklearn.metrics import precision_score
prec = precision_score(Ytst,Ypred,average= 'micro')
prec

"""F1 Score"""

F1 = 2*pm*rm/(pm+rm)

from sklearn.metrics import f1_score
f1 = f1_score(Ytst,Ypred,average = 'micro')
f1

