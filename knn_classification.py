# -*- coding: utf-8 -*-
"""KNN_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WwOxhJn8cY8KtPj0SAjhCSeBvNFgaTzr
"""

# Import Dataset 
from sklearn.datasets import load_iris
data = load_iris()

data

# getting the data description 
print(data.DESCR)

X = data.data # independent data 
Y = data.target # dependent data

"""Train - Test Split """

from sklearn.model_selection import train_test_split 
Xtrn,Xtst,Ytrn,Ytst = train_test_split(X,Y,train_size = 0.8, random_state = 10)

print(Xtrn.shape)
print(Ytrn.shape)
print(Xtst.shape)
print(Ytst.shape)

"""Selecting Value of K"""

import numpy as np 
from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics 
error = [] # to store rmse values for different k 
for K in range(20):
  K = K + 1
  model = KNeighborsClassifier(n_neighbors = K ) 

  model.fit(Xtrn,Ytrn) #fit the model 
  pred =  model.predict(Xtst) # make the prediction on test set 
  error.append(np.mean(pred != Ytst)) # calculate error and append 
  print('Error value for k = ' , K , 'is :', np.min(error))

# plotting the rmse values against k values 
   import pandas as pd 
   curve = pd.DataFrame(error) # elbow curve 
   curve.plot()

"""Training KNN Classifier"""

# from sklearn.neighbors import KNeighborsClassifier

model = KNeighborsClassifier(n_neighbors = 8)

model.fit(Xtrn,Ytrn)

"""Evaluation of Model"""

Ypred = model.predict(Xtst)

print(Ytst)
print(Ypred)

"""Accuracy """

from sklearn.metrics import accuracy_score 
acc = accuracy_score(Ytst,Ypred)
acc

"""Confusion Matrix"""

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(Ytst,Ypred,labels=[0,1,2])
cm

"""Recall Matrix"""

rm = (((cm.T)/(cm.sum(axis = 1))).T)
rm

"""Precision Matrix """

pm = (cm/cm.sum(axis=0))
pm

prec = metrics.precision_score(Ytst,Ypred,average = 'macro')
print(prec)

"""F1 Score"""

F1 = 2*pm*rm/(pm*rm)

F1

