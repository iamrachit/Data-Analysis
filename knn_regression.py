# -*- coding: utf-8 -*-
"""KNN_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H_FHH0aLxBqGglG7NAO3ZCcAqlauLQR0

Import Datasets
"""

from sklearn.datasets import load_boston 
data = load_boston()

print(data.DESCR)

X = data.data
Y = data.target

"""Train - Test Split """

from sklearn.model_selection import train_test_split
Xtrn,Xtst,Ytrn,Ytst = train_test_split(X,Y,train_size = 0.9 , random_state = 10)

print(Xtrn.shape)
print(Ytrn.shape)
print(Xtst.shape)
print(Ytst.shape)

"""Select the value of k """

import numpy as np 
from sklearn.neighbors import KNeighborsRegressor
from sklearn import metrics 
rmse_val = [] # to store rmse values for different k 
for K in range(40):
  K = K + 1
  model = KNeighborsRegressor(n_neighbors = K)
  model.fit(Xtrn,Ytrn) # fit the model 
  pred = model.predict(Xtst) # make prediction on test set 
  error = np.sqrt(metrics.mean_squared_error(Ytst,pred)) # calculate rmse
  rmse_val.append(error) #store rmse values
  print('RMSE value for k =',K,'is:' ,error)

# plotting the rmse values against k values 
import pandas as pd 
curve = pd.DataFrame(rmse_val) #elbow curve 
curve.plot()

"""Training KNN Regressor"""

model = KNeighborsRegressor(n_neighbors = 5)
model.fit(Xtrn,Ytrn)

"""Evaluation of model"""

Ypred = model.predict(Xtst)

print(Ypred)
print(Ytst)

"""Mean Absolute Error"""

from sklearn.metrics import mean_absolute_error

mean_absolute_error(Ypred,Ytst)

"""Mean Squared Error"""

metrics.mean_squared_error(Ypred,Ytst)

"""Root Mean Squared Error"""

metrics.mean_squared_error(Ypred,Ytst)**.5

"""Score"""

scr = model.score(Xtst,Ytst)
print(scr)

"""R2 Score"""

r2 = metrics.r2_score(Ytst,Ypred)

print(r2)

